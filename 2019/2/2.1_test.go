package main

import (
	"reflect"
	"testing"
)

func TestCalculateFirstOpcode(t *testing.T) {
	tests := []struct {
		name string
		ints []int
		want []int
	}{
		{
			name: "first example",
			ints: []int{1, 0, 0, 0, 99},
			want: []int{2, 0, 0, 0, 99},
		}, {
			name: "second example",
			ints: []int{2, 3, 0, 3, 99},
			want: []int{2, 3, 0, 6, 99},
		}, {
			name: "third example",
			ints: []int{2, 4, 4, 5, 99, 0},
			want: []int{2, 4, 4, 5, 99, 9801},
		}, {
			name: "fourth example",
			ints: []int{1, 1, 1, 4, 99, 5, 6, 0, 99},
			want: []int{30, 1, 1, 4, 2, 5, 6, 0, 99},
		}, {
			name: "given input",
			ints: []int{1, 12, 2, 3, 1, 1, 2, 3, 1, 3, 4, 3, 1, 5, 0, 3, 2, 6, 1, 19, 2, 19, 9, 23, 1, 23, 5, 27, 2, 6, 27, 31, 1, 31, 5, 35, 1, 35, 5, 39, 2, 39, 6, 43, 2, 43, 10, 47, 1, 47, 6, 51, 1, 51, 6, 55, 2, 55, 6, 59, 1, 10, 59, 63, 1, 5, 63, 67, 2, 10, 67, 71, 1, 6, 71, 75, 1, 5, 75, 79, 1, 10, 79, 83, 2, 83, 10, 87, 1, 87, 9, 91, 1, 91, 10, 95, 2, 6, 95, 99, 1, 5, 99, 103, 1, 103, 13, 107, 1, 107, 10, 111, 2, 9, 111, 115, 1, 115, 6, 119, 2, 13, 119, 123, 1, 123, 6, 127, 1, 5, 127, 131, 2, 6, 131, 135, 2, 6, 135, 139, 1, 139, 5, 143, 1, 143, 10, 147, 1, 147, 2, 151, 1, 151, 13, 0, 99, 2, 0, 14, 0},
			want: []int{4576384, 12, 2, 2, 1, 1, 2, 3, 1, 3, 4, 3, 1, 5, 0, 3, 2, 6, 1, 24, 2, 19, 9, 72, 1, 23, 5, 73, 2, 6, 27, 146, 1, 31, 5, 147, 1, 35, 5, 148, 2, 39, 6, 296, 2, 43, 10, 1184, 1, 47, 6, 1186, 1, 51, 6, 1188, 2, 55, 6, 2376, 1, 10, 59, 2380, 1, 5, 63, 2381, 2, 10, 67, 9524, 1, 6, 71, 9526, 1, 5, 75, 9527, 1, 10, 79, 9531, 2, 83, 10, 38124, 1, 87, 9, 38127, 1, 91, 10, 38131, 2, 6, 95, 76262, 1, 5, 99, 76263, 1, 103, 13, 76268, 1, 107, 10, 76272, 2, 9, 111, 228816, 1, 115, 6, 228818, 2, 13, 119, 1144090, 1, 123, 6, 1144092, 1, 5, 127, 1144093, 2, 6, 131, 2288186, 2, 6, 135, 4576372, 1, 139, 5, 4576373, 1, 143, 10, 4576377, 1, 147, 2, 4576379, 1, 151, 13, 0, 99, 2, 0, 14, 0},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := CalculateFirstOpcode(tt.ints); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("CalculateFirstOpcode() = %v, want %v", got, tt.want)
			}
		})
	}
}
